// HeadHunter Resume Auto-Boost Extension
// Content Script for HeadHunter pages

import { BackgroundMessage, ContentMessage } from '../utils/types';
import { logger } from '../utils/logger';

// ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –§–õ–ê–ì –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ content script
(window as any).resumeBoosterLoaded = true;

// State management
let isInitialized = false;
let isInitializing = false; // Fix: Add flag to prevent race condition
let mutationObserver: MutationObserver | null = null;
let refreshTimer: ReturnType<typeof setTimeout> | null = null;
let lastButtonState: boolean | null = null;

/**
 * Initialize the content script
 */
function initialize(): void {
  // Fix: Prevent race condition with proper locking
  if (isInitialized || isInitializing) {
    return;
  }

  isInitializing = true;

  try {
    // Set up message listener
    setupMessageListener();

    // Set up DOM observer
    setupMutationObserver();

    // Set up page refresh mechanism
    setupPageRefresh().catch(error => {
      console.error('Failed to setup page refresh:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      logger.error('ContentScript', 'Failed to setup page refresh', {
        url: window.location.href,
        error: error instanceof Error ? error.message : String(error)
      }).catch(() => {});
    });

    // Initial button check with delay to ensure page is loaded
    setTimeout(() => {
      checkButtonState();
    }, 1000);

    // Additional checks with increasing delays
    setTimeout(() => checkButtonState(), 3000);
    setTimeout(() => checkButtonState(), 5000);

    isInitialized = true;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    logger.success('ContentScript', 'Successfully initialized', {
      url: window.location.href,
      readyState: document.readyState
    }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.critical('ContentScript', 'Initialization failed', {
      url: window.location.href,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined
    }).catch(() => {});
    
    console.error('Failed to initialize content script:', error);
  } finally {
    isInitializing = false;
  }
}

/**
 * Find the boost button using multiple selectors
 */
function findBoostButton(): HTMLElement | null {
  // First try the most reliable selector
  const directButton = document.querySelector('button[data-qa="resume-update-button"]') as HTMLElement;
  if (directButton) {
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    logger.success('ContentScript', 'Button found via direct selector', {
      url: window.location.href,
      buttonText: directButton.textContent?.trim(),
      selector: 'button[data-qa="resume-update-button"]'
    }).catch(() => {});
    
    return directButton;
  }

  // Priority search: Look for exact text matches first
  const exactTextMatches = [
    '–ü–æ–¥–Ω—è—Ç—å –≤ –ø–æ–∏—Å–∫–µ',
    '–ü–æ–¥–Ω—è—Ç—å —Ä–µ–∑—é–º–µ', 
    '–ü–æ–¥–Ω—è—Ç—å',
    '–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ',
    '–û–±–Ω–æ–≤–∏—Ç—å'
  ];

  for (const exactText of exactTextMatches) {
    const allElements = document.querySelectorAll('button, a, [role="button"]');
    for (let i = 0; i < allElements.length; i++) {
      const element = allElements[i] as HTMLElement;
      const elementText = element.textContent?.trim() || '';
      
      if (elementText === exactText) {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
        logger.success('ContentScript', 'Button found via text match', {
          url: window.location.href,
          buttonText: elementText,
          matchedText: exactText,
          method: 'exact_text_match'
        }).catch(() => {});
        
        return element;
      }
    }
  }

  // Continue with other search methods...
  for (const partialText of exactTextMatches) {
    const allElements = document.querySelectorAll('button, a, [role="button"]');
    for (let i = 0; i < allElements.length; i++) {
      const element = allElements[i] as HTMLElement;
      const elementText = element.textContent?.trim() || '';
      
      if (elementText.includes(partialText)) {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        logger.success('ContentScript', 'Button found via partial text match', {
          url: window.location.href,
          buttonText: elementText,
          matchedText: partialText,
          method: 'partial_text_match'
        }).catch(() => {});
        
        return element;
      }
    }
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
  logger.error('ContentScript', 'Button not found on page', {
    url: window.location.href,
    totalButtons: document.querySelectorAll('button').length,
    totalLinks: document.querySelectorAll('a').length,
    totalClickable: document.querySelectorAll('button, a, [role="button"]').length,
    pageTitle: document.title
  }).catch(() => {});

  return null;
}

/**
 * Check if the boost button is currently active/clickable
 */
function isButtonActive(): boolean {
  const button = findBoostButton();

  if (!button) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
    logger.warning('ContentScript', 'Button activity check failed - button not found', {
      url: window.location.href
    }).catch(() => {});
    return false;
  }

  // Check if button is disabled
  if (
    button.hasAttribute('disabled') ||
    button.getAttribute('aria-disabled') === 'true'
  ) {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    logger.warning('ContentScript', 'Button is disabled', {
      url: window.location.href,
      buttonText: button.textContent?.trim(),
      disabled: button.hasAttribute('disabled'),
      ariaDisabled: button.getAttribute('aria-disabled')
    }).catch(() => {});
    return false;
  }

  // Check if button has inactive classes
  const classList = button.classList;
  const inactiveClasses = ['disabled', 'inactive', 'loading', 'cooldown'];

  for (const inactiveClass of inactiveClasses) {
    if (classList.contains(inactiveClass)) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ –∫–ª–∞—Å—Å—É
      logger.warning('ContentScript', 'Button has inactive class', {
        url: window.location.href,
        buttonText: button.textContent?.trim(),
        inactiveClass: inactiveClass,
        allClasses: button.className
      }).catch(() => {});
      return false;
    }
  }

  // Check button text for inactive states
  const buttonText = button.textContent?.toLowerCase() || '';
  const inactiveTexts = [
    '–ø–æ–¥–æ–∂–¥–∏—Ç–µ',
    '–æ–±–Ω–æ–≤–ª–µ–Ω–æ',
    '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
    '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
  ];

  for (const inactiveText of inactiveTexts) {
    if (buttonText.includes(inactiveText)) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
      logger.warning('ContentScript', 'Button has inactive text', {
        url: window.location.href,
        buttonText: button.textContent?.trim(),
        inactiveText: inactiveText
      }).catch(() => {});
      return false;
    }
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  logger.success('ContentScript', 'Button is active and clickable', {
    url: window.location.href,
    buttonText: button.textContent?.trim(),
    className: button.className
  }).catch(() => {});

  return true;
}

/**
 * Click the boost button using multiple methods
 */
async function clickBoostButton(): Promise<boolean> {
  try {
    const button = findBoostButton();

    if (!button) {
      console.warn('‚ùå Boost button not found');
      return false;
    }

    if (!isButtonActive()) {
      console.warn('‚ùå Boost button is not active/clickable');
      return false;
    }

    // üîç –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    const isTabActive = !document.hidden && document.visibilityState === 'visible';

    // ü§ñ –ì–ò–ë–†–ò–î–ù–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏–º–∏—Ç–∞—Ü–∏–∏
    logger.warning('ContentScript', 'Human simulation started', {
      url: window.location.href,
      tabActive: isTabActive,
      simulationType: isTabActive ? 'full' : 'lightweight',
      buttonText: button.textContent?.trim()
    }).catch(() => {});
    
    // üé≠ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø –ß–ï–õ–û–í–ï–ö–ê –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
    
    // 1. –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
    const pageReadingTime = Math.random() * 1500 + 800; // 0.8-2.3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, pageReadingTime));
    
    // 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫)
    if (isTabActive) {
      for (let i = 0; i < 2; i++) {
        const randomX = Math.random() * window.innerWidth;
        const randomY = Math.random() * window.innerHeight;
        
        const mouseMoveEvent = new MouseEvent('mousemove', {
          bubbles: true,
          cancelable: true,
          view: window,
          clientX: randomX,
          clientY: randomY
        });
        document.dispatchEvent(mouseMoveEvent);
        
        await new Promise(resolve => setTimeout(resolve, 150 + Math.random() * 200));
      }
    }
    
    // 3. –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    try {
      const scrollBehavior = isTabActive ? 'smooth' : 'auto';
      button.scrollIntoView({ behavior: scrollBehavior, block: 'center' });
      
      const scrollWait = isTabActive ? 400 : 100;
      await new Promise(resolve => setTimeout(resolve, scrollWait));
    } catch (e) {
      console.warn('Scroll failed:', e);
    }
    
    // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞
    await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500));
    
    // 1. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    const thinkingDelay = isTabActive ? 
      (Math.random() * 1000 + 500) :  // 0.5-1.5 —Å–µ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π
      (Math.random() * 300 + 200);    // 0.2-0.5 —Å–µ–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    
    await new Promise(resolve => setTimeout(resolve, thinkingDelay));

    // 2. –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    try {
      const scrollBehavior = isTabActive ? 'smooth' : 'auto';
      button.scrollIntoView({ behavior: scrollBehavior, block: 'center' });
      
      const scrollWait = isTabActive ? 500 : 100;
      await new Promise(resolve => setTimeout(resolve, scrollWait));
    } catch (e) {
      console.warn('Scroll failed:', e);
    }

    // 3. –ò–º–∏—Ç–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (isTabActive) {
      // üñ±Ô∏è –ü–û–õ–ù–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      
      try {
        const rect = button.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        // üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –ö –ö–ù–û–ü–ö–ï
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–æ—á–∫–∏ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
        const startX = centerX + (Math.random() - 0.5) * 100;
        const startY = centerY + (Math.random() - 0.5) * 100;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –∫–Ω–æ–ø–∫–µ (3 —à–∞–≥–∞)
        const steps = 3;
        for (let i = 0; i < steps; i++) {
          const progress = (i + 1) / steps;
          const currentX = startX + (centerX - startX) * progress;
          const currentY = startY + (centerY - startY) * progress;
          
          const mouseMoveEvent = new MouseEvent('mousemove', {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: currentX + (Math.random() - 0.5) * 3, // –ù–µ–±–æ–ª—å—à–æ–π –¥–∂–∏—Ç—Ç–µ—Ä
            clientY: currentY + (Math.random() - 0.5) * 3
          });
          document.dispatchEvent(mouseMoveEvent);
          
          // –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–≤–∏–∂–µ–Ω–∏—è–º–∏
          await new Promise(resolve => setTimeout(resolve, 80 + Math.random() * 120));
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        const finalMouseMove = new MouseEvent('mousemove', {
          bubbles: true,
          cancelable: true,
          view: window,
          clientX: centerX,
          clientY: centerY
        });
        document.dispatchEvent(finalMouseMove);
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ hover (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–µ—Ç—Å—è)
        await new Promise(resolve => setTimeout(resolve, 150 + Math.random() * 250));
        
        // –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        const mouseEnterEvent = new MouseEvent('mouseenter', {
          bubbles: false,
          cancelable: true,
          view: window,
          clientX: centerX,
          clientY: centerY
        });
        button.dispatchEvent(mouseEnterEvent);
        
        // Hover —ç—Ñ—Ñ–µ–∫—Ç
        const mouseOverEvent = new MouseEvent('mouseover', {
          bubbles: true,
          cancelable: true,
          view: window,
          clientX: centerX,
          clientY: centerY
        });
        button.dispatchEvent(mouseOverEvent);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        const buttonText = button.textContent?.trim() || '';
        const readingTime = Math.max(buttonText.length * 30, 200); // 30ms –Ω–∞ —Å–∏–º–≤–æ–ª, –º–∏–Ω–∏–º—É–º 200ms
        await new Promise(resolve => setTimeout(resolve, readingTime));
        
        // üéØ –ò–ú–ò–¢–ê–¶–ò–Ø –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–Ø
        const decisionTime = Math.random() * 400 + 200; // 200-600ms –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, decisionTime));

        // Focus –Ω–∞ –∫–Ω–æ–ø–∫—É
        try {
          button.focus();
          await new Promise(resolve => setTimeout(resolve, 50));
        } catch (e) {
          console.warn('Focus failed:', e);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–º–∏—Ç–∞—Ü–∏—é
        logger.success('ContentScript', 'Mouse simulation completed', {
          url: window.location.href,
          mouseEvents: ['mousemove', 'mouseenter', 'mouseover'],
          focusSuccess: true,
          buttonCoords: { x: centerX, y: centerY },
          approachSteps: steps,
          readingTime: readingTime,
          decisionTime: decisionTime
        }).catch(() => {});
        
      } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–º–∏—Ç–∞—Ü–∏–∏
        logger.error('ContentScript', 'Mouse simulation failed', {
          url: window.location.href,
          error: error instanceof Error ? error.message : String(error)
        }).catch(() => {});
      }
    } else {
      // ‚ö° –õ–ï–ì–ö–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º "—á—Ç–µ–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        const buttonText = button.textContent?.trim() || '';
        const readingTime = Math.max(buttonText.length * 10, 100); // 10ms –Ω–∞ —Å–∏–º–≤–æ–ª, –º–∏–Ω–∏–º—É–º 100ms
        await new Promise(resolve => setTimeout(resolve, readingTime));
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º focus —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–µ)
        let focusSuccess = false;
        try {
          const focusEvent = new FocusEvent('focus', {
            bubbles: true,
            cancelable: true,
            view: window
          });
          button.dispatchEvent(focusEvent);
          await new Promise(resolve => setTimeout(resolve, 50));
          focusSuccess = true;
        } catch (e) {
          console.warn('Focus event failed:', e);
        }
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º hover —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        let hoverSuccess = false;
        try {
          button.classList.add('hover', 'focus-visible');
          await new Promise(resolve => setTimeout(resolve, 100));
          button.classList.remove('hover', 'focus-visible');
          hoverSuccess = true;
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CSS –∫–ª–∞—Å—Å–æ–≤
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ª–µ–≥–∫—É—é –∏–º–∏—Ç–∞—Ü–∏—é
        logger.success('ContentScript', 'Lightweight simulation completed', {
          url: window.location.href,
          buttonText: buttonText,
          readingTime: readingTime,
          focusSuccess: focusSuccess,
          hoverSuccess: hoverSuccess,
          textLength: buttonText.length
        }).catch(() => {});
        
      } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–µ–≥–∫–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏
        logger.error('ContentScript', 'Lightweight simulation failed', {
          url: window.location.href,
          error: error instanceof Error ? error.message : String(error)
        }).catch(() => {});
      }
    }

    console.log('ü§ñ Human simulation complete, starting click sequence...');

    // 4. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ö–õ–ò–ö–û–í (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    let clickSuccess = false;
    const clickResults: string[] = [];

    // üé≤ –†–ê–ù–î–û–ú–ò–ó–ê–¶–ò–Ø –ü–û–†–Ø–î–ö–ê –ú–ï–¢–û–î–û–í –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const clickMethods = [
      { name: 'realistic_mouse', weight: isTabActive ? 3 : 1 },
      { name: 'direct_click', weight: 2 },
      { name: 'keyboard_enter', weight: 2 },
      { name: 'programmatic_click', weight: 1 }
    ];
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    const shuffledMethods = clickMethods
      .sort(() => Math.random() - 0.5)
      .filter(() => Math.random() > 0.3); // –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–æ–¥—ã
    
    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–ª–∏–∫–æ–≤
    const preClickDelay = Math.random() * 300 + 100;
    await new Promise(resolve => setTimeout(resolve, preClickDelay));

    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.warning('ContentScript', 'DIAGNOSTIC: Starting click sequence', {
      url: window.location.href,
      buttonText: button.textContent?.trim(),
      buttonClasses: button.className,
      buttonDisabled: button.hasAttribute('disabled'),
      buttonAriaDisabled: button.getAttribute('aria-disabled'),
      shuffledMethods: shuffledMethods.map(m => m.name),
      tabActive: isTabActive
    }).catch(() => {});

    for (const method of shuffledMethods) {
      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
      const methodDelay = Math.random() * 200 + 50;
      await new Promise(resolve => setTimeout(resolve, methodDelay));
      
      if (method.name === 'realistic_mouse' && isTabActive) {
        // Method 1: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö)
        try {
          const rect = button.getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;
          
          // üéØ –ë–û–õ–ï–ï –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨
          
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–µ–±–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–µ—Ç—Å—è)
          for (let i = 0; i < 2; i++) {
            const jitterX = centerX + (Math.random() - 0.5) * 4;
            const jitterY = centerY + (Math.random() - 0.5) * 4;
            
            const jitterMove = new MouseEvent('mousemove', {
              bubbles: true,
              cancelable: true,
              view: window,
              clientX: jitterX,
              clientY: jitterY
            });
            document.dispatchEvent(jitterMove);
            
            await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 50));
          }
          
          // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          const finalX = centerX + (Math.random() - 0.5) * 2;
          const finalY = centerY + (Math.random() - 0.5) * 2;
          
          // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
          const mouseDownDelay = Math.random() * 50;
          const mouseUpDelay = 80 + Math.random() * 120; // 80-200ms
          const clickDelay = 10 + Math.random() * 20;
          
          const mouseEvents = [
            { type: 'mousedown', delay: mouseDownDelay },
            { type: 'mouseup', delay: mouseUpDelay },
            { type: 'click', delay: clickDelay }
          ];

          for (const eventConfig of mouseEvents) {
            await new Promise(resolve => setTimeout(resolve, eventConfig.delay));
            
            const event = new MouseEvent(eventConfig.type, {
              bubbles: true,
              cancelable: true,
              view: window,
              button: 0,
              buttons: eventConfig.type === 'mousedown' ? 1 : 0,
              clientX: finalX,
              clientY: finalY,
              screenX: finalX + window.screenX,
              screenY: finalY + window.screenY
            });
            
            button.dispatchEvent(event);
          }
          
          clickResults.push('Realistic mouse: SUCCESS');
          clickSuccess = true;
        } catch (error) {
          clickResults.push(`Realistic mouse: FAILED - ${error}`);
        }
      } else if (method.name === 'direct_click') {
        // Method 2: Direct click —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        try {
          const delay = isTabActive ? (150 + Math.random() * 250) : (75 + Math.random() * 125);
          await new Promise(resolve => setTimeout(resolve, delay));
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
          if (isTabActive) {
            const rect = button.getBoundingClientRect();
            const moveEvent = new MouseEvent('mousemove', {
              bubbles: true,
              cancelable: true,
              view: window,
              clientX: rect.left + rect.width / 2 + (Math.random() - 0.5) * 2,
              clientY: rect.top + rect.height / 2 + (Math.random() - 0.5) * 2
            });
            document.dispatchEvent(moveEvent);
            await new Promise(resolve => setTimeout(resolve, 20 + Math.random() * 30));
          }
          
          button.click();
          clickResults.push('Direct click: SUCCESS');
          clickSuccess = true;
        } catch (error) {
          clickResults.push(`Direct click: FAILED - ${error}`);
        }
      } else if (method.name === 'keyboard_enter') {
        // Method 3: Keyboard activation —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        try {
          const keyDelay = isTabActive ? (60 + Math.random() * 80) : (30 + Math.random() * 40);
          await new Promise(resolve => setTimeout(resolve, keyDelay));
          
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
          const enterDownEvent = new KeyboardEvent('keydown', {
            key: 'Enter',
            code: 'Enter',
            keyCode: 13,
            which: 13,
            bubbles: true,
            cancelable: true
          });
          button.dispatchEvent(enterDownEvent);
          
          // –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É keydown –∏ keyup
          const keyHoldTime = isTabActive ? (60 + Math.random() * 140) : (40 + Math.random() * 60);
          await new Promise(resolve => setTimeout(resolve, keyHoldTime));
          
          const enterUpEvent = new KeyboardEvent('keyup', {
            key: 'Enter',
            code: 'Enter',
            keyCode: 13,
            which: 13,
            bubbles: true,
            cancelable: true
          });
          button.dispatchEvent(enterUpEvent);
          
          clickResults.push('Keyboard Enter: SUCCESS');
          clickSuccess = true;
        } catch (error) {
          clickResults.push(`Keyboard Enter: FAILED - ${error}`);
        }
      } else if (method.name === 'programmatic_click') {
        // Method 4: –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ dispatchEvent (–∑–∞–ø–∞—Å–Ω–æ–π)
        try {
          const delay = isTabActive ? (40 + Math.random() * 60) : (20 + Math.random() * 30);
          await new Promise(resolve => setTimeout(resolve, delay));
          
          const clickEvent = new Event('click', {
            bubbles: true,
            cancelable: true
          });
          button.dispatchEvent(clickEvent);
          
          clickResults.push('Programmatic click: SUCCESS');
          clickSuccess = true;
        } catch (error) {
          clickResults.push(`Programmatic click: FAILED - ${error}`);
        }
      }
      
      // üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
      if (shuffledMethods.indexOf(method) < shuffledMethods.length - 1) {
        const betweenMethodsDelay = Math.random() * 100 + 50;
        await new Promise(resolve => setTimeout(resolve, betweenMethodsDelay));
      }
    }

    console.log('üìä Click attempt summary:', clickResults);

    if (clickSuccess) {
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–æ–≤
      const postClickButton = findBoostButton();
      const postClickActive = postClickButton ? isButtonActive() : false;
      const postClickPageText = document.body.textContent?.toLowerCase() || '';
      
      logger.warning('ContentScript', 'DIAGNOSTIC: Post-click state', {
        url: window.location.href,
        clickResults: clickResults,
        postClickButtonFound: !!postClickButton,
        postClickButtonActive: postClickActive,
        postClickButtonText: postClickButton?.textContent?.trim(),
        postClickButtonClasses: postClickButton?.className,
        pageTextLength: postClickPageText.length,
        hasSuccessKeywords: {
          —É—Å–ø–µ—à–Ω–æ: postClickPageText.includes('—É—Å–ø–µ—à–Ω–æ'),
          –æ–±–Ω–æ–≤–ª–µ–Ω–æ: postClickPageText.includes('–æ–±–Ω–æ–≤–ª–µ–Ω–æ'),
          –ø–æ–¥–Ω—è—Ç–æ: postClickPageText.includes('–ø–æ–¥–Ω—è—Ç–æ')
        }
      }).catch(() => {});

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
      logger.success('ContentScript', 'Button click attempts completed', {
        url: window.location.href,
        buttonText: button.textContent?.trim(),
        methods: clickResults,
        tabActive: isTabActive,
        simulationType: isTabActive ? 'full' : 'lightweight',
        totalMethods: clickResults.length,
        successfulMethods: clickResults.filter(r => r.includes('SUCCESS')).length,
        failedMethods: clickResults.filter(r => r.includes('FAILED')).length
      }).catch(() => {});
      
      // 5. –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï –û–¢–í–ï–¢–ê
      const waitTime = isTabActive ? 5000 : 3000; // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      const checkInterval = 500;
      const maxChecks = Math.floor(waitTime / checkInterval);
      let checksPerformed = 0;
      let buttonStateChanges = 0;
      let successIndicatorsFound: string[] = [];
      
      for (let i = 0; i < maxChecks; i++) {
        await new Promise(resolve => setTimeout(resolve, checkInterval));
        checksPerformed++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const buttonAfterClick = findBoostButton();
        if (buttonAfterClick) {
          const isStillActive = isButtonActive();
          
          if (!isStillActive) {
            buttonStateChanges++;
            
            // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await new Promise(resolve => setTimeout(resolve, 1500)); // –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã
            
            const buttonAfterDelay = findBoostButton();
            const stillInactiveAfterDelay = buttonAfterDelay ? !isButtonActive() : false;
            
            if (stillInactiveAfterDelay) {
              // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
              logger.success('ContentScript', 'Button state change confirmed - click successful', {
                url: window.location.href,
                checksPerformed: checksPerformed,
                waitTime: waitTime,
                simulationType: isTabActive ? 'full' : 'lightweight',
                detectionMethod: 'button_state_change_verified',
                stableInactiveTime: 1500
              }).catch(() => {});
              
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
              await new Promise(resolve => setTimeout(resolve, 500));
              return true;
            } else {
              // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–∫–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
              logger.warning('ContentScript', 'Button returned to active state - possible rollback', {
                url: window.location.href,
                checksPerformed: checksPerformed,
                simulationType: isTabActive ? 'full' : 'lightweight',
                detectionMethod: 'button_reactivation_detected',
                rollbackTime: 1500
              }).catch(() => {});
              
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const successIndicators = [
          '–æ–±–Ω–æ–≤–ª–µ–Ω–æ', '–ø–æ–¥–Ω—è—Ç–æ', '—É—Å–ø–µ—à–Ω–æ', 'updated', 'boosted', 'success'
        ];
        
        const pageText = document.body.textContent?.toLowerCase() || '';
        for (const indicator of successIndicators) {
          if (pageText.includes(indicator) && !successIndicatorsFound.includes(indicator)) {
            successIndicatorsFound.push(indicator);
            
            // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–∞—Ç–∏–ª—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å–µ –µ—â–µ –µ—Å—Ç—å
            const buttonAfterDelay = findBoostButton();
            const pageTextAfterDelay = document.body.textContent?.toLowerCase() || '';
            const indicatorStillPresent = pageTextAfterDelay.includes(indicator);
            const buttonStillInactive = buttonAfterDelay ? !isButtonActive() : false;
            
            if (indicatorStillPresent && buttonStillInactive) {
              // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö
              logger.success('ContentScript', 'Success confirmed after verification delay', {
                url: window.location.href,
                indicator: indicator,
                indicatorStillPresent: indicatorStillPresent,
                buttonStillInactive: buttonStillInactive,
                checksPerformed: checksPerformed,
                waitTime: waitTime,
                simulationType: isTabActive ? 'full' : 'lightweight',
                detectionMethod: 'success_indicator_verified'
              }).catch(() => {});
              
              return true;
            } else {
              // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
              logger.warning('ContentScript', 'Success indicator disappeared - possible rollback detected', {
                url: window.location.href,
                indicator: indicator,
                indicatorStillPresent: indicatorStillPresent,
                buttonStillInactive: buttonStillInactive,
                checksPerformed: checksPerformed,
                simulationType: isTabActive ? 'full' : 'lightweight',
                detectionMethod: 'rollback_detected'
              }).catch(() => {});
              
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã —Å—Ä–∞–±–æ—Ç–∞—é—Ç
            }
          }
        }
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
      logger.warning('ContentScript', 'Intelligent waiting completed', {
        url: window.location.href,
        checksPerformed: checksPerformed,
        maxChecks: maxChecks,
        waitTime: waitTime,
        buttonStateChanges: buttonStateChanges,
        successIndicatorsFound: successIndicatorsFound,
        simulationType: isTabActive ? 'full' : 'lightweight'
      }).catch(() => {});
      
      // üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      
      const finalButton = findBoostButton();
      const finalButtonActive = finalButton ? isButtonActive() : false;
      const finalPageText = document.body.textContent?.toLowerCase() || '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      const additionalSuccessIndicators = [
        '—Ä–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
        '—Ä–µ–∑—é–º–µ –ø–æ–¥–Ω—è—Ç–æ', 
        '–ø–æ–¥–Ω—è—Ç–æ –≤ –ø–æ–∏—Å–∫–µ',
        '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ',
        'resume updated',
        'resume boosted'
      ];
      
      const foundAdditionalIndicators: string[] = [];
      for (const indicator of additionalSuccessIndicators) {
        if (finalPageText.includes(indicator)) {
          foundAdditionalIndicators.push(indicator);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ URL (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—Ö–∞)
      const urlChanged = window.location.href !== window.location.href.split('?')[0];
      const hasSuccessParams = window.location.href.includes('success') || 
                              window.location.href.includes('updated') ||
                              window.location.href.includes('boosted');
      
      // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
      const successScore = 
        (foundAdditionalIndicators.length > 0 ? 2 : 0) +
        (successIndicatorsFound.length > 0 ? 2 : 0) +
        (!finalButtonActive ? 1 : 0) +
        (buttonStateChanges > 0 ? 1 : 0) +
        (hasSuccessParams ? 1 : 0);
      
      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —ç—Ç–æ rollback!
      const rollbackDetected = buttonStateChanges > 0 && finalButtonActive;
      
      // –ï—Å–ª–∏ rollback –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–∞–ª, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      const isLikelySuccessful = !rollbackDetected && successScore >= 3;
      
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      logger.warning('ContentScript', 'DIAGNOSTIC: Final analysis details', {
        url: window.location.href,
        finalButton: {
          found: !!finalButton,
          active: finalButtonActive,
          text: finalButton?.textContent?.trim(),
          classes: finalButton?.className,
          disabled: finalButton?.hasAttribute('disabled'),
          ariaDisabled: finalButton?.getAttribute('aria-disabled')
        },
        pageAnalysis: {
          textLength: finalPageText.length,
          hasSuccessKeywords: {
            —É—Å–ø–µ—à–Ω–æ: finalPageText.includes('—É—Å–ø–µ—à–Ω–æ'),
            –æ–±–Ω–æ–≤–ª–µ–Ω–æ: finalPageText.includes('–æ–±–Ω–æ–≤–ª–µ–Ω–æ'),
            –ø–æ–¥–Ω—è—Ç–æ: finalPageText.includes('–ø–æ–¥–Ω—è—Ç–æ'),
            '—Ä–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ': finalPageText.includes('—Ä–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'),
            '—Ä–µ–∑—é–º–µ –ø–æ–¥–Ω—è—Ç–æ': finalPageText.includes('—Ä–µ–∑—é–º–µ –ø–æ–¥–Ω—è—Ç–æ'),
            '–ø–æ–¥–Ω—è—Ç–æ –≤ –ø–æ–∏—Å–∫–µ': finalPageText.includes('–ø–æ–¥–Ω—è—Ç–æ –≤ –ø–æ–∏—Å–∫–µ')
          }
        },
        scoring: {
          foundAdditionalIndicators: foundAdditionalIndicators,
          successIndicatorsFound: successIndicatorsFound,
          finalButtonActive: finalButtonActive,
          buttonStateChanges: buttonStateChanges,
          hasSuccessParams: hasSuccessParams,
          rollbackDetected: rollbackDetected,
          successScore: successScore,
          threshold: 3,
          isLikelySuccessful: isLikelySuccessful
        },
        urlInfo: {
          current: window.location.href,
          urlChanged: urlChanged,
          hasSuccessParams: hasSuccessParams
        }
      }).catch(() => {});
      
      if (isLikelySuccessful) {
        logger.success('ContentScript', 'Final analysis indicates likely success', {
          url: window.location.href,
          successScore: successScore,
          foundAdditionalIndicators: foundAdditionalIndicators,
          successIndicatorsFound: successIndicatorsFound,
          finalButtonActive: finalButtonActive,
          buttonStateChanges: buttonStateChanges,
          hasSuccessParams: hasSuccessParams,
          rollbackDetected: rollbackDetected,
          urlChanged: urlChanged,
          simulationType: isTabActive ? 'full' : 'lightweight',
          detectionMethod: 'comprehensive_analysis'
        }).catch(() => {});
        
        return true;
      } else {
        logger.warning('ContentScript', 'Final analysis indicates likely failure', {
          url: window.location.href,
          successScore: successScore,
          foundAdditionalIndicators: foundAdditionalIndicators,
          successIndicatorsFound: successIndicatorsFound,
          finalButtonActive: finalButtonActive,
          buttonStateChanges: buttonStateChanges,
          hasSuccessParams: hasSuccessParams,
          rollbackDetected: rollbackDetected,
          urlChanged: urlChanged,
          simulationType: isTabActive ? 'full' : 'lightweight',
          detectionMethod: rollbackDetected ? 'rollback_failure' : 'comprehensive_analysis'
        }).catch(() => {});
        
        return false;
      }
    } else {
      console.error('‚ùå All click methods failed');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Failed to click boost button:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
    logger.critical('ContentScript', 'Failed to click boost button', {
      error: error instanceof Error ? error.message : String(error),
      url: window.location.href,
      buttonFound: !!findBoostButton()
    }).catch(() => {});
    
    return false;
  }
}

/**
 * Refresh the current page
 */
function refreshPage(): void {
  try {
    console.log('Refreshing page to maintain session...');
    window.location.reload();
  } catch (error) {
    console.error('Failed to refresh page:', error);
  }
}

/**
 * Check button state and notify background script
 */
function checkButtonState(): void {
  const button = findBoostButton();
  const isActive = isButtonActive();

  // Only send message if state changed
  if (lastButtonState !== isActive) {
    lastButtonState = isActive;

    const messageSent = sendMessageToBackground({
      type: 'BUTTON_STATE',
      success: true,
      data: {
        buttonFound: !!button,
        isActive: isActive,
        buttonText: button?.textContent || null,
      },
    });

    // Fix: Handle message sending failure
    if (!messageSent) {
      console.warn('Failed to notify background script of button state change');
    }
  }
}

/**
 * Set up mutation observer to watch for DOM changes
 */
function setupMutationObserver(): void {
  if (mutationObserver) {
    mutationObserver.disconnect();
  }

  mutationObserver = new MutationObserver(mutations => {
    let shouldCheckButton = false;

    for (const mutation of mutations) {
      // Check if any added/removed nodes might affect the button
      if (mutation.type === 'childList') {
        const nodes = [
          ...Array.from(mutation.addedNodes),
          ...Array.from(mutation.removedNodes),
        ];

        for (const node of nodes) {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;

            // Check if the node or its descendants contain button-related elements
            if (
              element.tagName === 'BUTTON' ||
              element.querySelector('button') ||
              element.classList.contains('resume-update') ||
              element.classList.contains('boost')
            ) {
              shouldCheckButton = true;
              break;
            }
          }
        }
      }

      // Check for attribute changes on buttons
      if (
        mutation.type === 'attributes' &&
        mutation.target.nodeType === Node.ELEMENT_NODE
      ) {
        const element = mutation.target as Element;

        if (
          element.tagName === 'BUTTON' ||
          element.closest('button') ||
          ['disabled', 'aria-disabled', 'class'].includes(
            mutation.attributeName || ''
          )
        ) {
          shouldCheckButton = true;
        }
      }
    }

    if (shouldCheckButton) {
      // Debounce button state checks
      setTimeout(checkButtonState, 100);
    }
  });

  // Start observing
  mutationObserver.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['disabled', 'aria-disabled', 'class'],
  });
}

/**
 * Set up page refresh mechanism
 */
async function setupPageRefresh(): Promise<void> {
  if (refreshTimer) {
    clearTimeout(refreshTimer);
  }

  try {
    // Get refresh interval from storage
    const result = await chrome.storage.sync.get(['extension_settings']);
    const settings = result.extension_settings || { refreshInterval: 15 };
    const refreshInterval = settings.refreshInterval * 60 * 1000; // Convert minutes to milliseconds

    refreshTimer = setTimeout(() => {
      refreshPage();
    }, refreshInterval);
  } catch (error) {
    console.error(
      'Failed to get refresh interval from settings, using default 15 minutes:',
      error
    );
    // Fallback to 15 minutes
    const refreshInterval = 15 * 60 * 1000;
    refreshTimer = setTimeout(() => {
      refreshPage();
    }, refreshInterval);
  }
}

/**
 * Set up page refresh mechanism with specific interval
 */
function setupPageRefreshWithInterval(intervalMinutes: number): void {
  if (refreshTimer) {
    clearTimeout(refreshTimer);
  }

  try {
    const refreshInterval = intervalMinutes * 60 * 1000; // Convert minutes to milliseconds

    refreshTimer = setTimeout(() => {
      refreshPage();
    }, refreshInterval);
  } catch (error) {
    console.error('‚ùå Failed to setup page refresh with interval:', error);
    // Fallback to 15 minutes
    const refreshInterval = 15 * 60 * 1000;
    refreshTimer = setTimeout(() => {
      refreshPage();
    }, refreshInterval);
  }
}

/**
 * Set up message listener for background script communication
 */
function setupMessageListener(): void {
  // Remove existing listener to prevent duplicates
  if (chrome.runtime.onMessage.hasListener(messageHandler)) {
    chrome.runtime.onMessage.removeListener(messageHandler);
  }

  chrome.runtime.onMessage.addListener(messageHandler);
}

/**
 * Message handler function
 */
function messageHandler(
  message: BackgroundMessage,
  _sender: chrome.runtime.MessageSender,
  sendResponse: (response: ContentMessage) => void
): boolean {
  switch (message.type) {
    case 'BOOST_RESUME':
      handleBoostRequest(sendResponse);
      return true; // Keep message channel open for async response

    case 'CHECK_BUTTON_STATE':
      handleButtonStateRequest(sendResponse);
      return false; // Synchronous response

    case 'REFRESH_PAGE':
      refreshPage();
      sendResponse({ type: 'PAGE_REFRESHED', success: true });
      return false;

    case 'GET_STATE':
      handleGetStateRequest(sendResponse);
      return false;

    case 'SETTINGS_UPDATE':
      handleSettingsUpdate(message.data);
      sendResponse({ type: 'BUTTON_STATE', success: true });
      return false;

    case 'TEST_MESSAGE':
      sendResponse({ 
        type: 'TEST_RESPONSE', 
        success: true, 
        data: { 
          loaded: true, 
          timestamp: Date.now(),
          url: window.location.href 
        } 
      });
      return false;

    default:
      console.warn('Unknown message type:', message.type);
      sendResponse({
        type: 'ERROR',
        success: false,
        data: 'Unknown message type',
      });
      return false;
  }
}

/**
 * Handle boost request from background script
 */
async function handleBoostRequest(
  sendResponse: (response: ContentMessage) => void
): Promise<void> {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞
    logger.warning('ContentScript', 'Boost request received - starting click attempt', {
      url: window.location.href,
      timestamp: new Date().toISOString()
    }).catch(() => {});

    const success = await clickBoostButton();

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–∫–∞
    if (success) {
      logger.success('ContentScript', 'Button click completed successfully', {
        url: window.location.href,
        timestamp: new Date().toISOString(),
        buttonFound: !!findBoostButton(),
        buttonActive: isButtonActive()
      }).catch(() => {});
    } else {
      logger.error('ContentScript', 'Button click failed', {
        url: window.location.href,
        timestamp: new Date().toISOString(),
        buttonFound: !!findBoostButton(),
        buttonActive: isButtonActive(),
        reason: 'clickBoostButton returned false'
      }).catch(() => {});
    }

    sendResponse({
      type: 'BUTTON_CLICKED',
      success: success,
      data: {
        timestamp: Date.now(),
        buttonFound: !!findBoostButton(),
        wasActive: isButtonActive(),
      },
    });
  } catch (error) {
    console.error('Error handling boost request:', error);

    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
    logger.critical('ContentScript', 'Exception during boost request', {
      url: window.location.href,
      timestamp: new Date().toISOString(),
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined
    }).catch(() => {});

    sendResponse({
      type: 'ERROR',
      success: false,
      data: {
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: Date.now(),
      },
    });
  }
}

/**
 * Handle button state request
 */
function handleButtonStateRequest(
  sendResponse: (response: ContentMessage) => void
): void {
  const button = findBoostButton();
  const isActive = isButtonActive();

  sendResponse({
    type: 'BUTTON_STATE',
    success: true,
    data: {
      buttonFound: !!button,
      isActive: isActive,
      buttonText: button?.textContent || null,
      timestamp: Date.now(),
    },
  });
}

/**
 * Handle get state request
 */
function handleGetStateRequest(
  sendResponse: (response: ContentMessage) => void
): void {
  const button = findBoostButton();

  sendResponse({
    type: 'BUTTON_STATE',
    success: true,
    data: {
      isInitialized: isInitialized,
      buttonFound: !!button,
      isActive: isButtonActive(),
      buttonText: button?.textContent || null,
      url: window.location.href,
      title: document.title,
      timestamp: Date.now(),
    },
  });
}

/**
 * Handle settings update from background script
 */
function handleSettingsUpdate(settings: any): void {
  // Update page refresh timer with new interval
  if (settings && settings.refreshInterval) {
    setupPageRefreshWithInterval(settings.refreshInterval);
  }
}

/**
 * Send message to background script
 */
function sendMessageToBackground(message: ContentMessage): boolean {
  try {
    chrome.runtime.sendMessage(message);
    return true; // Fix: Return success indicator
  } catch (error) {
    console.error('Failed to send message to background:', error);
    
    // Fix: Attempt to notify user of communication failure
    if (message.type === 'BUTTON_STATE') {
      console.warn('Button state update failed - extension may not be responding');
    }
    
    return false; // Fix: Return failure indicator
  }
}

/**
 * Clean up resources
 */
function cleanup(): void {
  if (mutationObserver) {
    mutationObserver.disconnect();
    mutationObserver = null;
  }

  if (refreshTimer) {
    clearTimeout(refreshTimer);
    refreshTimer = null;
  }

  // Remove message listener
  if (chrome.runtime.onMessage.hasListener(messageHandler)) {
    chrome.runtime.onMessage.removeListener(messageHandler);
  }

  isInitialized = false;
}

// Initialize immediately and on DOM ready
initialize();

// Also try after DOM is fully loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(initialize, 100);
  });
} else if (document.readyState === 'interactive') {
  setTimeout(initialize, 100);
}

// Force initialization after page load
window.addEventListener('load', () => {
  setTimeout(initialize, 500);
});

// Clean up on page unload
window.addEventListener('beforeunload', cleanup);

// Export functions for testing (Node.js environment)
declare const module: any;
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    findBoostButton,
    isButtonActive,
    clickBoostButton,
    refreshPage,
    checkButtonState,
  };
}
