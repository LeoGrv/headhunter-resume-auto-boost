(()=>{"use strict";var e;!function(e){e.DISCOVERED="discovered",e.ACTIVE="active",e.PAUSED="paused",e.COOLDOWN="cooldown",e.ERROR="error",e.REMOVED="removed"}(e||(e={}));const t={clickInterval:2,maxTabs:2,globalPaused:!1,loggingEnabled:!0,refreshInterval:10};function o(e){return{...e,interval:e.clickInterval}}const a="extension_settings",n="managed_tabs",s="activity_logs";async function r(e){try{console.log("💾 STORAGE SAVE - Input settings:",e);const t=await l();console.log("💾 STORAGE SAVE - Current settings from storage:",t);const n={...t,...e};console.log("💾 STORAGE SAVE - Merged settings:",n);const s=o(n);console.log("💾 STORAGE SAVE - Converted to storage format:",s),await chrome.storage.sync.set({[a]:s}),console.log("💾 STORAGE SAVE - Successfully saved to Chrome Storage");const r=await chrome.storage.sync.get(a);console.log("💾 STORAGE SAVE - Verification read from Chrome Storage:",r)}catch(e){throw console.error("❌ STORAGE SAVE - Failed:",e),new Error(`Storage save failed: ${e}`)}}async function l(){try{console.log("📥 STORAGE GET - Reading from Chrome Storage...");const n=await chrome.storage.sync.get(a);console.log("📥 STORAGE GET - Raw result from Chrome Storage:",n);const s=n[a];console.log("📥 STORAGE GET - Extracted stored settings:",s);const r=o(t);console.log("📥 STORAGE GET - Defaults in legacy format:",r);const l={...r,...s};console.log("📥 STORAGE GET - Merged legacy settings:",l);const c={clickInterval:(e=l).interval||e.clickInterval||t.clickInterval,maxTabs:e.maxTabs,globalPaused:e.globalPaused,loggingEnabled:e.loggingEnabled,refreshInterval:e.refreshInterval};console.log("📥 STORAGE GET - Converted to modern format:",c);const i=function(e){var o,a,n;return{clickInterval:(n=e.clickInterval,"number"==typeof n&&n>=1&&n<=600?e.clickInterval:t.clickInterval),maxTabs:(a=e.maxTabs,"number"==typeof a&&a>=1&&a<=5?e.maxTabs:t.maxTabs),globalPaused:"boolean"==typeof e.globalPaused?e.globalPaused:t.globalPaused,loggingEnabled:"boolean"==typeof e.loggingEnabled?e.loggingEnabled:t.loggingEnabled,refreshInterval:(o=e.refreshInterval,"number"==typeof o&&o>=1&&o<=600?e.refreshInterval:t.refreshInterval)}}(c);return console.log("📥 STORAGE GET - Final validated settings:",i),i}catch(e){console.error("❌ STORAGE GET - Failed:",e);const o={...t};return console.log("📥 STORAGE GET - Returning defaults due to error:",o),o}var e}async function c(e){await r({globalPaused:e})}async function i(){try{return(await chrome.storage.local.get(n))[n]||[]}catch(e){return console.error("Failed to get managed tabs:",e),[]}}const g=new class{constructor(){this.logs=[],this.maxLogs=500,this.storageKey="extension_error_logs"}async log(e,t,o,a){const n={timestamp:(new Date).toISOString(),level:e,component:t,message:o,data:a?JSON.stringify(a).substring(0,2e3):void 0};this.logs.push(n),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs));try{await chrome.storage.local.set({[this.storageKey]:this.logs})}catch(e){console.error("Failed to save logs to storage:",e)}const s=`[${e}] ${t}: ${o}`;switch(e){case"ERROR":case"CRITICAL":console.error(s,a);break;case"WARNING":console.warn(s,a);break;case"SUCCESS":console.log(s,a)}}async getLogs(){try{return(await chrome.storage.local.get([this.storageKey]))[this.storageKey]||[]}catch(e){return console.error("Failed to get logs from storage:",e),[]}}async clearLogs(){try{this.logs=[],await chrome.storage.local.remove([this.storageKey])}catch(e){console.error("Failed to clear logs:",e)}}async exportLogs(){return(await this.getLogs()).map((e=>`${e.timestamp} [${e.level}] ${e.component}: ${e.message}${e.data?` | Data: ${e.data}`:""}`)).join("\n")}async error(e,t,o){return this.log("ERROR",e,t,o)}async critical(e,t,o){return this.log("CRITICAL",e,t,o)}async success(e,t,o){return this.log("SUCCESS",e,t,o)}async warning(e,t,o){return this.log("WARNING",e,t,o)}};let d,u,m,b,v,f,E,S,T;console.log("🚀 HeadHunter Resume Auto-Boost Extension: Popup script loaded"),console.log("🚀 Current URL:",window.location.href),console.log("🚀 Document ready state:",document.readyState);let p=[],h=!1;async function y(e,t=3,o=1e3){let a=null;for(let n=1;n<=t;n++)try{console.log(`📤 Popup attempt ${n}/${t}: Sending message to Service Worker:`,e.type);const o=await chrome.runtime.sendMessage(e);if(o&&!1!==o.success)return console.log(`✅ Message sent successfully to Service Worker on attempt ${n}`),o;throw new Error(o?.error||"Service Worker returned unsuccessful response")}catch(e){if(a=e,console.warn(`⚠️ Popup attempt ${n}/${t} failed:`,e),n===t)break;const s=o*Math.pow(2,n-1);console.log(`⏳ Popup waiting ${s}ms before retry ${n+1}...`),await new Promise((e=>setTimeout(e,s)))}throw console.error(`❌ Popup: All ${t} attempts failed. Last error:`,a),a||new Error(`Failed to send message to Service Worker after ${t} attempts`)}async function I(){try{console.log("📥 LOAD SETTINGS - Calling getSettings()..."),T=await l(),console.log("📥 LOAD SETTINGS - Received from storage:",T)}catch(e){console.error("❌ Failed to load settings:",e),T={clickInterval:15,maxTabs:2,refreshInterval:15,globalPaused:!1,loggingEnabled:!0},console.log("📥 LOAD SETTINGS - Using defaults:",T)}}async function w(){try{console.log("=== Loading Managed Tabs ===");const e=await y({type:"GET_EXTENSION_STATE"});console.log("Service Worker response:",e),e.success&&e.data.managedTabs?(console.log("Raw managedTabs from Service Worker:",e.data.managedTabs),p=e.data.managedTabs.map((e=>{const t={tabId:e.tabId,title:e.title,url:e.url,state:e.state,lastClickTime:e.lastClickTime,errorCount:e.errorCount||0,timerStatus:e.timerStatus,nextClickTime:e.timerStatus?.isActive?Date.now()+(e.timerStatus.remainingMs||0):null};return console.log("Converted tab:",{tabId:t.tabId,title:t.title,timerStatus:t.timerStatus}),t})),console.log("✅ Managed tabs loaded with timer info:",p.length,"tabs")):(console.log("❌ Service Worker response failed, using storage fallback"),console.log("Response details:",{success:e.success,hasData:!!e.data,hasManagedTabs:!(!e.data||!e.data.managedTabs)}),p=await i(),console.log("Managed tabs loaded from storage (fallback):",p)),console.log("=== End Loading Managed Tabs ===")}catch(e){console.error("❌ Failed to load managed tabs:",e);try{p=await i(),console.log("Storage fallback successful:",p.length,"tabs")}catch(e){console.error("❌ Storage fallback also failed:",e),p=[]}}}async function A(){try{const e=await async function(){try{return(await chrome.storage.local.get(s))[s]||[]}catch(e){return console.error("Failed to get logs:",e),[]}}();return console.log("Logs loaded:",e.length,"entries"),e}catch(e){return console.error("Failed to load logs:",e),[]}}async function P(){try{h=!h,await c(h),T.globalPaused=h,await r(T);const e={type:"SET_GLOBAL_PAUSE",paused:h},t=await y(e);if(!t?.success)return console.error("Failed to set global pause in background script:",t),h=!h,void await c(h);N(),k(),console.log("Global pause toggled:",h)}catch(e){console.error("Failed to toggle global pause:",e),h=!h,N(),k()}}async function C(){try{console.log("🔍 DIRECT CHROME STORAGE CHECK:");const e=await chrome.storage.sync.get();console.log("🔍 ALL Chrome Storage data:",e);const t=await chrome.storage.sync.get("extension_settings");console.log("🔍 Settings from Chrome Storage:",t)}catch(e){console.error("🔍 Failed to check Chrome Storage:",e)}}async function O(e){try{console.log("💾 UPDATE SETTINGS - Input updates:",e),console.log("💾 UPDATE SETTINGS - Current settings before merge:",T),T={...T,...e},console.log("💾 UPDATE SETTINGS - Settings after merge:",T),console.log("💾 UPDATE SETTINGS - Calling saveSettings..."),await r(T),console.log("💾 UPDATE SETTINGS - saveSettings completed");const t={type:"SETTINGS_UPDATE",data:T};console.log("💾 UPDATE SETTINGS - Sending message to background:",t),y(t).catch((e=>{console.error("Failed to send settings update to Service Worker:",e)})),console.log("💾 UPDATE SETTINGS - Reloading settings..."),await I(),console.log("💾 UPDATE SETTINGS - Settings after reload:",T),await w(),G(),k(),console.log("💾 UPDATE SETTINGS - Final settings:",T)}catch(e){console.error("❌ Failed to update settings:",e)}}async function R(){try{await async function(){try{await chrome.storage.local.set({[s]:[]})}catch(e){throw console.error("Failed to clear logs:",e),new Error(`Failed to clear logs: ${e}`)}}(),U(),console.log("Logs cleared")}catch(e){console.error("Failed to clear logs:",e)}}async function L(){try{const e=await g.exportLogs();if(!e.trim())return void alert("No logs to export");const t=new Blob([e],{type:"text/plain"}),o=URL.createObjectURL(t),a=document.createElement("a");a.href=o,a.download=`hh-extension-logs-${(new Date).toISOString().slice(0,19).replace(/:/g,"-")}.txt`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(o),console.log("✅ Logs exported successfully")}catch(e){console.error("❌ Failed to export logs:",e),alert("Failed to export logs")}}function D(e){switch(console.log("Received message from background:",e),e.type){case"TAB_UPDATE":w().then((()=>{G(),k()}));break;case"LOG_UPDATE":U();break;case"STATUS_UPDATE":k();break;default:console.log("Unknown message type:",e.type)}}function k(t,o){if(t&&o)return d.className=`status-dot ${t}`,void(u.textContent=o);h?(d.className="status-dot paused",u.textContent="Paused"):0===p.length?(d.className="status-dot",u.textContent="No tabs found"):p.some((t=>t.state===e.ERROR))?(d.className="status-dot error",u.textContent="Error detected"):p.some((t=>t.state===e.ACTIVE))?(d.className="status-dot active",u.textContent=`Active (${p.filter((t=>t.state===e.ACTIVE)).length} tabs)`):(d.className="status-dot",u.textContent="Inactive")}function N(){h?(v.innerHTML='\n      <div class="btn-icon">▶️</div>\n      <div class="btn-content">\n        <span class="btn-title">Resume All</span>\n        <span class="btn-subtitle">Start automation</span>\n      </div>\n    ',v.className="action-btn secondary"):(v.innerHTML='\n      <div class="btn-icon">⏸</div>\n      <div class="btn-content">\n        <span class="btn-title">Pause All</span>\n        <span class="btn-subtitle">Stop all automation</span>\n      </div>\n    ',v.className="action-btn primary")}function G(){const t=document.querySelector(".badge-count");if(t&&(t.textContent=p.length.toString()),0===p.length)return void(m.innerHTML='\n      <div class="empty-state">\n        <div class="empty-icon">📄</div>\n        <p class="empty-title">No active tabs</p>\n        <p class="empty-subtitle">Open a HeadHunter resume page to start</p>\n      </div>\n    ');const o=p.map((t=>{const o=function(t){switch(t){case e.ACTIVE:return"state-active";case e.PAUSED:return"state-paused";case e.COOLDOWN:return"state-cooldown";case e.ERROR:return"state-error";default:return"state-inactive"}}(t.state),a=function(t){switch(t){case e.ACTIVE:return"Active";case e.PAUSED:return"Paused";case e.COOLDOWN:return"Cooldown";case e.ERROR:return"Error";case e.DISCOVERED:return"Discovered";case e.REMOVED:return"Removed";default:return"Unknown"}}(t.state),n=function(e){console.log("=== Timer Debug Info ==="),console.log("Tab:",{tabId:e.tabId,title:e.title,state:e.state});const t=p.find((t=>t.tabId===e.tabId));if(console.log("Found tabData:",t?"YES":"NO"),!t)return console.log("❌ No tabData found for tabId:",e.tabId),console.log("Available managedTabs:",p.map((e=>({tabId:e.tabId,title:e.title})))),"Not scheduled";if(console.log("TabData timerStatus:",t.timerStatus),!t.timerStatus)return console.log("❌ No timerStatus in tabData"),"Not scheduled";const o=t.timerStatus;if(console.log("Timer status details:",{exists:o.exists,isActive:o.isActive,remainingMs:o.remainingMs,remainingFormatted:o.remainingFormatted,alarmName:o.alarmName}),!o.exists)return console.log("❌ Timer does not exist"),"Not scheduled";if(!o.isActive)return console.log("❌ Timer is not active"),"Not scheduled";const a=o.remainingMs||0;if(console.log("Remaining milliseconds:",a),a<=0)return console.log("✅ Timer ready (remaining <= 0)"),"Ready";const n=Math.ceil(a/1e3),s=Math.floor(n/60),r=n%60,l=s>0?`${s}m ${r}s`:`${r}s`;return console.log("✅ Alarm timer result:",l),console.log("=== End Timer Debug ==="),l}(t),s=function(e){if(!e.lastClickTime)return"Never";const t=Date.now()-e.lastClickTime,o=Math.floor(t/6e4);return o<1?"Just now":o<60?`${o}m ago`:`${Math.floor(o/60)}h ago`}(t);return`\n      <div class="tab-item" data-tab-id="${t.tabId}">\n        <div class="tab-info">\n          <div class="tab-title" title="${t.url}">\n            ${M(t.title||t.url,35)}\n          </div>\n          <div class="tab-status ${o}">\n            ${a} • Next: ${n} • Last: ${s}\n          </div>\n        </div>\n        <div class="tab-actions">\n          <button class="tab-btn tab-pause-btn" data-tab-id="${t.tabId}" title="${t.state===e.PAUSED?"Resume":"Pause"}">\n            ${t.state===e.PAUSED?"▶️":"⏸️"}\n          </button>\n          <button class="tab-btn tab-remove-btn" data-tab-id="${t.tabId}" title="Remove">\n            🗑️\n          </button>\n        </div>\n      </div>\n    `})).join("");m.innerHTML=o,m.querySelectorAll(".tab-pause-btn").forEach((e=>{e.addEventListener("click",$)})),m.querySelectorAll(".tab-remove-btn").forEach((e=>{e.addEventListener("click",x)}))}async function $(t){const o=t.target,a=parseInt(o.dataset.tabId||"0",10);try{const t=p.find((e=>e.tabId===a));if(!t)return void console.error("Tab not found:",a);const o=!(t.state===e.PAUSED),n={type:"SET_TAB_PAUSE",tabId:a,paused:o},s=await y(n);s?.success?(console.log(`Tab ${o?"paused":"resumed"}:`,a),await w(),G()):console.error("Failed to toggle tab pause:",s)}catch(e){console.error("Failed to toggle tab pause:",e)}}async function x(e){const t=e.target,o=parseInt(t.dataset.tabId||"0",10);if(confirm("Remove this tab from auto-boosting?"))try{p=p.filter((e=>e.tabId!==o)),G(),k();const e={type:"TAB_REMOVE",tabId:o},t=await y(e);t?.success?console.log("Tab removed successfully:",o):(console.error("Failed to remove tab from background:",t),await w(),G())}catch(e){console.error("Failed to remove tab:",e),await w(),G()}}async function U(){try{const e=await A();if(0===e.length)return void(b.innerHTML='\n        <div class="empty-state">\n          <div class="empty-icon">📊</div>\n          <p class="empty-title">No recent activity</p>\n          <p class="empty-subtitle">Activity will appear here when automation starts</p>\n        </div>\n      ');const t=e.slice(-15).reverse().map((e=>{const t=new Date(e.timestamp).toLocaleTimeString();return`\n        <div class="log-item">\n          <div class="log-level ${function(e){switch(e.toLowerCase()){case"success":return"success";case"warning":return"warning";case"error":return"error";default:return"info"}}(e.level)}"></div>\n          <div class="log-content">\n            <div class="log-message">${M(e.message,60)}</div>\n            <div class="log-time">${t}</div>\n          </div>\n        </div>\n      `})).join("");b.innerHTML=t}catch(e){console.error("Failed to render logs:",e),b.innerHTML='\n      <div class="empty-state">\n        <div class="empty-icon">❌</div>\n        <p class="empty-title">Failed to load logs</p>\n        <p class="empty-subtitle">Please try refreshing the extension</p>\n      </div>\n    '}}function M(e,t){return e.length<=t?e:e.substring(0,t-3)+"..."}console.log("🚀 POPUP - Adding DOMContentLoaded listener..."),document.addEventListener("DOMContentLoaded",(()=>{console.log("🚀 POPUP - DOMContentLoaded fired, calling initializePopup..."),async function(){try{if(console.log("🚀 POPUP INIT - Starting initialization..."),console.log("🚀 POPUP INIT - DOM ready state:",document.readyState),d=document.querySelector(".status-dot"),u=document.querySelector(".status-text"),m=document.querySelector(".tabs-list"),b=document.querySelector(".logs-list"),v=document.getElementById("global-pause"),f=document.getElementById("settings"),E=document.getElementById("clear-logs"),S=document.getElementById("export-logs"),console.log("🚀 POPUP INIT - DOM elements found:",{statusDot:!!d,statusText:!!u,tabsList:!!m,logsList:!!b,globalPauseBtn:!!v,settingsBtn:!!f,clearLogsBtn:!!E,exportLogsBtn:!!S}),!(d&&u&&m&&b&&v&&f&&E&&S))throw console.error("🚀 POPUP INIT - Missing DOM elements!"),new Error("Required DOM elements not found");await I(),await w(),await async function(){try{console.log("📥 LOAD GLOBAL PAUSE - Getting state from Service Worker...");const e=await y({type:"GET_EXTENSION_STATE"});e.success&&e.data?(h=e.data.globalPaused,console.log("📥 LOAD GLOBAL PAUSE - From Service Worker:",h)):(console.log("📥 LOAD GLOBAL PAUSE - Service Worker failed, using storage fallback"),h=await async function(){return(await l()).globalPaused}(),console.log("📥 LOAD GLOBAL PAUSE - From storage:",h)),N(),console.log("✅ Global pause state loaded:",h)}catch(e){console.error("❌ Failed to load global pause state:",e),h=!1,N()}}(),await A(),v.addEventListener("click",P),f.addEventListener("click",(async()=>{await async function(){console.log("🔧 SETTINGS CLICK - Current settings before reload:",T),await C(),await I(),console.log("🔧 SETTINGS CLICK - Current settings after reload:",T);const e=`\nCurrent Settings:\n• Click interval: ${T.clickInterval} minutes\n• Page refresh interval: ${T.refreshInterval} minutes\n\nWhat would you like to change?\n1. Click interval (1-600 minutes)\n2. Page refresh interval (1-600 minutes)\n3. Cancel\n\nEnter 1, 2, or 3:`,t=prompt(e,"1");if(console.log("🔧 User choice:",t),"1"===t){const e=prompt(`Current click interval: ${T.clickInterval} minutes\nEnter new interval (1-600 minutes):`,T.clickInterval.toString());if(console.log("🔧 User entered new interval:",e),e){const t=parseInt(e,10);console.log("🔧 Parsed interval:",t),t>=1&&t<=600?(console.log("🔧 Calling updateSettings with clickInterval:",t),await async function(e){try{console.log("🧪 DIRECT SAVE TEST - Saving interval:",e),await chrome.storage.sync.set({test_interval:e,extension_settings:{clickInterval:e,maxTabs:2,globalPaused:!1,loggingEnabled:!0,refreshInterval:10}}),console.log("🧪 DIRECT SAVE TEST - Save completed");const t=await chrome.storage.sync.get(["test_interval","extension_settings"]);console.log("🧪 DIRECT SAVE TEST - Verification:",t)}catch(e){console.error("🧪 DIRECT SAVE TEST - Failed:",e)}}(t),await O({clickInterval:t}),console.log("🔧 updateSettings completed, settings should be updated"),console.log("🔧 Checking Chrome Storage after save:"),await C()):alert("Interval must be between 1 and 600 minutes")}}else if("2"===t){const e=prompt(`Current page refresh interval: ${T.refreshInterval} minutes\nEnter new interval (1-600 minutes):`,T.refreshInterval.toString());if(e){const t=parseInt(e,10);t>=1&&t<=600?await O({refreshInterval:t}):alert("Refresh interval must be between 1 and 600 minutes")}}}()})),E.addEventListener("click",R),S.addEventListener("click",L),chrome.runtime.onMessage.addListener(D),console.log("Event listeners set up"),function(){const e=document.querySelector(".version-info");if(e){const t=chrome.runtime.getManifest();e.textContent=`v${t.version} - Final Release ✅`,console.log("📋 Version updated to:",t.version)}}(),k(),G(),U(),console.log("🚀 POPUP INIT - Popup interface initialized successfully")}catch(e){console.error("🚀 POPUP INIT - Failed to initialize popup:",e),k("error","Initialization failed")}}()})),setInterval((()=>{w().then((()=>{G(),k()})),U()}),5e3)})();