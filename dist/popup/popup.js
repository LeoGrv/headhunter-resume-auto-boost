(()=>{"use strict";var e;!function(e){e.DISCOVERED="discovered",e.ACTIVE="active",e.PAUSED="paused",e.COOLDOWN="cooldown",e.ERROR="error",e.REMOVED="removed"}(e||(e={}));const t={clickInterval:2,maxTabs:2,globalPaused:!1,loggingEnabled:!0,refreshInterval:10};function o(e){return{...e,interval:e.clickInterval}}const n="extension_settings",a="managed_tabs",s="activity_logs";async function r(e){try{console.log("üíæ STORAGE SAVE - Input settings:",e);const t=await l();console.log("üíæ STORAGE SAVE - Current settings from storage:",t);const a={...t,...e};console.log("üíæ STORAGE SAVE - Merged settings:",a);const s=o(a);console.log("üíæ STORAGE SAVE - Converted to storage format:",s),await chrome.storage.sync.set({[n]:s}),console.log("üíæ STORAGE SAVE - Successfully saved to Chrome Storage");const r=await chrome.storage.sync.get(n);console.log("üíæ STORAGE SAVE - Verification read from Chrome Storage:",r)}catch(e){throw console.error("‚ùå STORAGE SAVE - Failed:",e),new Error(`Storage save failed: ${e}`)}}async function l(){try{console.log("üì• STORAGE GET - Reading from Chrome Storage...");const a=await chrome.storage.sync.get(n);console.log("üì• STORAGE GET - Raw result from Chrome Storage:",a);const s=a[n];console.log("üì• STORAGE GET - Extracted stored settings:",s);const r=o(t);console.log("üì• STORAGE GET - Defaults in legacy format:",r);const l={...r,...s};console.log("üì• STORAGE GET - Merged legacy settings:",l);const c={clickInterval:(e=l).interval||e.clickInterval||t.clickInterval,maxTabs:e.maxTabs,globalPaused:e.globalPaused,loggingEnabled:e.loggingEnabled,refreshInterval:e.refreshInterval};console.log("üì• STORAGE GET - Converted to modern format:",c);const i=function(e){var o,n,a;return{clickInterval:(a=e.clickInterval,"number"==typeof a&&a>=1&&a<=600?e.clickInterval:t.clickInterval),maxTabs:(n=e.maxTabs,"number"==typeof n&&n>=1&&n<=5?e.maxTabs:t.maxTabs),globalPaused:"boolean"==typeof e.globalPaused?e.globalPaused:t.globalPaused,loggingEnabled:"boolean"==typeof e.loggingEnabled?e.loggingEnabled:t.loggingEnabled,refreshInterval:(o=e.refreshInterval,"number"==typeof o&&o>=1&&o<=600?e.refreshInterval:t.refreshInterval)}}(c);return console.log("üì• STORAGE GET - Final validated settings:",i),i}catch(e){console.error("‚ùå STORAGE GET - Failed:",e);const o={...t};return console.log("üì• STORAGE GET - Returning defaults due to error:",o),o}var e}async function c(e){await r({globalPaused:e})}async function i(){try{return(await chrome.storage.local.get(a))[a]||[]}catch(e){return console.error("Failed to get managed tabs:",e),[]}}const d=new class{constructor(){this.logs=[],this.maxLogs=500,this.storageKey="extension_error_logs"}async log(e,t,o,n){const a={timestamp:(new Date).toISOString(),level:e,component:t,message:o,data:n?JSON.stringify(n).substring(0,2e3):void 0};this.logs.push(a),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs));try{await chrome.storage.local.set({[this.storageKey]:this.logs})}catch(e){console.error("Failed to save logs to storage:",e)}const s=`[${e}] ${t}: ${o}`;switch(e){case"ERROR":case"CRITICAL":console.error(s,n);break;case"WARNING":console.warn(s,n);break;case"SUCCESS":console.log(s,n)}}async getLogs(){try{return(await chrome.storage.local.get([this.storageKey]))[this.storageKey]||[]}catch(e){return console.error("Failed to get logs from storage:",e),[]}}async clearLogs(){try{this.logs=[],await chrome.storage.local.remove([this.storageKey])}catch(e){console.error("Failed to clear logs:",e)}}async exportLogs(){return(await this.getLogs()).map((e=>`${e.timestamp} [${e.level}] ${e.component}: ${e.message}${e.data?` | Data: ${e.data}`:""}`)).join("\n")}async error(e,t,o){return this.log("ERROR",e,t,o)}async critical(e,t,o){return this.log("CRITICAL",e,t,o)}async success(e,t,o){return this.log("SUCCESS",e,t,o)}async warning(e,t,o){return this.log("WARNING",e,t,o)}};let g,u,m,v,f,b,E,S,y,p,h,T,I,A,w,L;console.log("üöÄ HeadHunter Resume Auto-Boost Extension: Popup script loaded"),console.log("üöÄ Current URL:",window.location.href),console.log("üöÄ Document ready state:",document.readyState);let O=[],P=!1;async function k(e,t=3,o=1e3){let n=null;for(let a=1;a<=t;a++)try{console.log(`üì§ Popup attempt ${a}/${t}: Sending message to Service Worker:`,e.type);const o=await chrome.runtime.sendMessage(e);if(o&&!1!==o.success)return console.log(`‚úÖ Message sent successfully to Service Worker on attempt ${a}`),o;throw new Error(o?.error||"Service Worker returned unsuccessful response")}catch(e){if(n=e,console.warn(`‚ö†Ô∏è Popup attempt ${a}/${t} failed:`,e),a===t)break;const s=o*Math.pow(2,a-1);console.log(`‚è≥ Popup waiting ${s}ms before retry ${a+1}...`),await new Promise((e=>setTimeout(e,s)))}throw console.error(`‚ùå Popup: All ${t} attempts failed. Last error:`,n),n||new Error(`Failed to send message to Service Worker after ${t} attempts`)}async function R(){try{console.log("üì• LOAD SETTINGS - Calling getSettings()..."),L=await l(),console.log("üì• LOAD SETTINGS - Received from storage:",L)}catch(e){console.error("‚ùå Failed to load settings:",e),L={clickInterval:15,maxTabs:2,refreshInterval:15,globalPaused:!1,loggingEnabled:!0},console.log("üì• LOAD SETTINGS - Using defaults:",L)}}async function C(){try{console.log("=== Loading Managed Tabs ===");const e=await k({type:"GET_EXTENSION_STATE"});console.log("Service Worker response:",e),e.success&&e.data.managedTabs?(console.log("Raw managedTabs from Service Worker:",e.data.managedTabs),O=e.data.managedTabs.map((e=>{const t={tabId:e.tabId,title:e.title,url:e.url,state:e.state,lastClickTime:e.lastClickTime,errorCount:e.errorCount||0,timerStatus:e.timerStatus,nextClickTime:e.timerStatus?.isActive?Date.now()+(e.timerStatus.remainingMs||0):null};return console.log("Converted tab:",{tabId:t.tabId,title:t.title,timerStatus:t.timerStatus}),t})),console.log("‚úÖ Managed tabs loaded with timer info:",O.length,"tabs")):(console.log("‚ùå Service Worker response failed, using storage fallback"),console.log("Response details:",{success:e.success,hasData:!!e.data,hasManagedTabs:!(!e.data||!e.data.managedTabs)}),O=await i(),console.log("Managed tabs loaded from storage (fallback):",O)),console.log("=== End Loading Managed Tabs ===")}catch(e){console.error("‚ùå Failed to load managed tabs:",e);try{O=await i(),console.log("Storage fallback successful:",O.length,"tabs")}catch(e){console.error("‚ùå Storage fallback also failed:",e),O=[]}}}async function D(){try{const e=await async function(){try{return(await chrome.storage.local.get(s))[s]||[]}catch(e){return console.error("Failed to get logs:",e),[]}}();return console.log("Logs loaded:",e.length,"entries"),e}catch(e){return console.error("Failed to load logs:",e),[]}}async function $(){try{P=!P,await c(P),L.globalPaused=P,await r(L);const e={type:"SET_GLOBAL_PAUSE",paused:P},t=await k(e);if(!t?.success)return console.error("Failed to set global pause in background script:",t),P=!P,void await c(P);M(),U(),console.log("Global pause toggled:",P)}catch(e){console.error("Failed to toggle global pause:",e),P=!P,M(),U()}}async function G(){try{await async function(){try{await chrome.storage.local.set({[s]:[]})}catch(e){throw console.error("Failed to clear logs:",e),new Error(`Failed to clear logs: ${e}`)}}(),V(),console.log("Logs cleared")}catch(e){console.error("Failed to clear logs:",e)}}async function N(){try{const e=await d.exportLogs();if(!e.trim())return void alert("No logs to export");const t=new Blob([e],{type:"text/plain"}),o=URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download=`hh-extension-logs-${(new Date).toISOString().slice(0,19).replace(/:/g,"-")}.txt`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(o),console.log("‚úÖ Logs exported successfully")}catch(e){console.error("‚ùå Failed to export logs:",e),alert("Failed to export logs")}}function x(e){switch(console.log("Received message from background:",e),e.type){case"TAB_UPDATE":C().then((()=>{F(),U()}));break;case"LOG_UPDATE":V();break;case"STATUS_UPDATE":U();break;default:console.log("Unknown message type:",e.type)}}function U(t,o){if(t&&o)return g.className=`status-dot ${t}`,void(u.textContent=o);P?(g.className="status-dot paused",u.textContent="Paused"):0===O.length?(g.className="status-dot",u.textContent="No tabs found"):O.some((t=>t.state===e.ERROR))?(g.className="status-dot error",u.textContent="Error detected"):O.some((t=>t.state===e.ACTIVE))?(g.className="status-dot active",u.textContent=`Active (${O.filter((t=>t.state===e.ACTIVE)).length} tabs)`):(g.className="status-dot",u.textContent="Inactive")}function M(){P?(f.innerHTML='\n      <div class="btn-icon">‚ñ∂Ô∏è</div>\n      <div class="btn-content">\n        <span class="btn-title">–ó–∞–ø—É—Å—Ç–∏—Ç—å</span>\n        <span class="btn-subtitle">–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é</span>\n      </div>\n    ',f.className="action-btn secondary"):(f.innerHTML='\n      <div class="btn-icon">‚è∏</div>\n      <div class="btn-content">\n        <span class="btn-title">–ü–∞—É–∑–∞</span>\n        <span class="btn-subtitle">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é</span>\n      </div>\n    ',f.className="action-btn primary")}function F(){const t=document.querySelector(".badge-count");if(t&&(t.textContent=O.length.toString()),0===O.length)return void(m.innerHTML='\n      <div class="empty-state">\n        <div class="empty-icon">üìÑ</div>\n        <p class="empty-title">–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>\n        <p class="empty-subtitle">–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ –Ω–∞ HeadHunter</p>\n      </div>\n    ');const o=O.map((t=>{const o=function(t){switch(t){case e.ACTIVE:return"state-active";case e.PAUSED:return"state-paused";case e.COOLDOWN:return"state-cooldown";case e.ERROR:return"state-error";default:return"state-inactive"}}(t.state),n=function(t){switch(t){case e.ACTIVE:return"–ê–∫—Ç–∏–≤–µ–Ω";case e.PAUSED:return"–ü–∞—É–∑–∞";case e.COOLDOWN:return"–û–∂–∏–¥–∞–Ω–∏–µ";case e.ERROR:return"–û—à–∏–±–∫–∞";case e.DISCOVERED:return"–ù–∞–π–¥–µ–Ω";case e.REMOVED:return"–£–¥–∞–ª–µ–Ω";default:return"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}}(t.state),a=function(e){console.log("=== Timer Debug Info ==="),console.log("Tab:",{tabId:e.tabId,title:e.title,state:e.state});const t=O.find((t=>t.tabId===e.tabId));if(console.log("Found tabData:",t?"YES":"NO"),!t)return console.log("‚ùå No tabData found for tabId:",e.tabId),console.log("Available managedTabs:",O.map((e=>({tabId:e.tabId,title:e.title})))),"Not scheduled";if(console.log("TabData timerStatus:",t.timerStatus),!t.timerStatus)return console.log("‚ùå No timerStatus in tabData"),"Not scheduled";const o=t.timerStatus;if(console.log("Timer status details:",{exists:o.exists,isActive:o.isActive,remainingMs:o.remainingMs,remainingFormatted:o.remainingFormatted,alarmName:o.alarmName}),!o.exists)return console.log("‚ùå Timer does not exist"),"Not scheduled";if(!o.isActive)return console.log("‚ùå Timer is not active"),"Not scheduled";const n=o.remainingMs||0;if(console.log("Remaining milliseconds:",n),n<=0)return console.log("‚úÖ Timer ready (remaining <= 0)"),"Ready";const a=Math.ceil(n/1e3),s=Math.floor(a/60),r=a%60,l=s>0?`${s}m ${r}s`:`${r}s`;return console.log("‚úÖ Alarm timer result:",l),console.log("=== End Timer Debug ==="),l}(t),s=function(e){if(!e.lastClickTime)return"Never";const t=Date.now()-e.lastClickTime,o=Math.floor(t/6e4);return o<1?"Just now":o<60?`${o}m ago`:`${Math.floor(o/60)}h ago`}(t);return`\n      <div class="tab-item" data-tab-id="${t.tabId}">\n        <div class="tab-info">\n          <div class="tab-title" title="${t.url}">\n            ${r=t.title||t.url,r.length<=35?r:r.substring(0,32)+"..."}\n          </div>\n          <div class="tab-status ${o}">\n            ${n} ‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ: ${a} ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${s}\n          </div>\n        </div>\n        <div class="tab-actions">\n          <button class="tab-btn tab-pause-btn" data-tab-id="${t.tabId}" title="${t.state===e.PAUSED?"–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å":"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"}">\n            ${t.state===e.PAUSED?"‚ñ∂Ô∏è":"‚è∏Ô∏è"}\n          </button>\n          <button class="tab-btn tab-remove-btn" data-tab-id="${t.tabId}" title="–£–¥–∞–ª–∏—Ç—å">\n            üóëÔ∏è\n          </button>\n        </div>\n      </div>\n    `;var r})).join("");m.innerHTML=o,m.querySelectorAll(".tab-pause-btn").forEach((e=>{e.addEventListener("click",B)})),m.querySelectorAll(".tab-remove-btn").forEach((e=>{e.addEventListener("click",q)}))}async function B(t){const o=t.target,n=parseInt(o.dataset.tabId||"0",10);try{const t=O.find((e=>e.tabId===n));if(!t)return void console.error("Tab not found:",n);const o=!(t.state===e.PAUSED),a={type:"SET_TAB_PAUSE",tabId:n,paused:o},s=await k(a);s?.success?(console.log(`Tab ${o?"paused":"resumed"}:`,n),await C(),F()):console.error("Failed to toggle tab pause:",s)}catch(e){console.error("Failed to toggle tab pause:",e)}}async function q(e){const t=e.target,o=parseInt(t.dataset.tabId||"0",10);if(confirm("Remove this tab from auto-boosting?"))try{O=O.filter((e=>e.tabId!==o)),F(),U();const e={type:"TAB_REMOVE",tabId:o},t=await k(e);t?.success?console.log("Tab removed successfully:",o):(console.error("Failed to remove tab from background:",t),await C(),F())}catch(e){console.error("Failed to remove tab:",e),await C(),F()}}async function V(){try{const e=await D();if(0===e.length)return void(v.innerHTML='\n        <div class="empty-state">\n          <div class="empty-icon">üìä</div>\n          <p class="empty-title">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>\n          <p class="empty-subtitle">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</p>\n        </div>\n      ');const t=e.slice(-15).reverse().map((e=>{const t=new Date(e.timestamp).toLocaleTimeString("ru-RU");return`\n        <div class="log-item">\n          <div class="log-level ${function(e){switch(e.toLowerCase()){case"success":return"success";case"warning":return"warning";case"error":return"error";default:return"info"}}(e.level)}">\n            ${function(e){switch(e.toLowerCase()){case"success":return"‚úÖ";case"warning":return"‚ö†Ô∏è";case"error":return"‚ùå";default:return"‚ÑπÔ∏è"}}(e.level)}\n          </div>\n          <div class="log-content">\n            <div class="log-message">${e.message}</div>\n            <div class="log-time">${t}</div>\n          </div>\n        </div>\n      `})).join("");v.innerHTML=t}catch(e){console.error("Failed to render logs:",e),v.innerHTML='\n      <div class="empty-state">\n        <div class="empty-icon">‚ùå</div>\n        <p class="empty-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</p>\n        <p class="empty-subtitle">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ</p>\n      </div>\n    '}}function _(){y.style.display="none"}function W(e){const t="click"===e?"[data-minutes]":"[data-refresh]";document.querySelectorAll(`.time-btn${t}`).forEach((e=>e.classList.remove("active")))}function H(){A.textContent=j(L.clickInterval),w.textContent=j(L.refreshInterval)}function j(e){if(e<60)return`${e} –º–∏–Ω`;const t=Math.floor(e/60),o=e%60;return 0===o?`${t} —á–∞—Å${t>1?"–∞":""}`:`${t} —á–∞—Å${t>1?"–∞":""} ${o} –º–∏–Ω`}async function z(){try{let e=L.clickInterval,t=L.refreshInterval;const o=document.querySelector(".time-btn[data-minutes].active");o?e=parseInt(o.dataset.minutes||"0",10):T.value&&(e=parseInt(T.value,10));const n=document.querySelector(".time-btn[data-refresh].active");if(n?t=parseInt(n.dataset.refresh||"0",10):I.value&&(t=parseInt(I.value,10)),e<1||e>600)return void alert("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–Ω—è—Ç–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 600 –º–∏–Ω—É—Ç");if(t<1||t>600)return void alert("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 600 –º–∏–Ω—É—Ç");await async function(e){try{console.log("üíæ UPDATE SETTINGS - Input updates:",e),console.log("üíæ UPDATE SETTINGS - Current settings before merge:",L),L={...L,...e},console.log("üíæ UPDATE SETTINGS - Settings after merge:",L),console.log("üíæ UPDATE SETTINGS - Calling saveSettings..."),await r(L),console.log("üíæ UPDATE SETTINGS - saveSettings completed");const t={type:"SETTINGS_UPDATE",data:L};console.log("üíæ UPDATE SETTINGS - Sending message to background:",t),k(t).catch((e=>{console.error("Failed to send settings update to Service Worker:",e)})),console.log("üíæ UPDATE SETTINGS - Reloading settings..."),await R(),console.log("üíæ UPDATE SETTINGS - Settings after reload:",L),await C(),F(),U(),console.log("üíæ UPDATE SETTINGS - Final settings:",L)}catch(e){console.error("‚ùå Failed to update settings:",e)}}({clickInterval:e,refreshInterval:t}),H();const a=h.querySelector(".btn-title")?.textContent,s=h.querySelector(".btn-title");s&&(s.textContent="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",setTimeout((()=>{s.textContent=a||"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}),2e3)),console.log("Settings saved successfully:",{newClickInterval:e,newRefreshInterval:t})}catch(e){console.error("Failed to save settings:",e),alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")}}console.log("üöÄ POPUP - Adding DOMContentLoaded listener..."),document.addEventListener("DOMContentLoaded",(()=>{console.log("üöÄ POPUP - DOMContentLoaded fired, calling initializePopup..."),async function(){try{if(console.log("üöÄ POPUP INIT - Starting initialization..."),console.log("üöÄ POPUP INIT - DOM ready state:",document.readyState),g=document.querySelector(".status-dot"),u=document.querySelector(".status-text"),m=document.querySelector(".tabs-list"),v=document.querySelector(".logs-list"),f=document.getElementById("global-pause"),b=document.getElementById("settings"),E=document.getElementById("clear-logs"),S=document.getElementById("export-logs"),y=document.querySelector(".settings-panel"),p=document.getElementById("close-settings"),h=document.getElementById("save-settings"),T=document.getElementById("custom-click-interval"),I=document.getElementById("custom-refresh-interval"),A=document.getElementById("current-click-time"),w=document.getElementById("current-refresh-time"),console.log("üöÄ POPUP INIT - DOM elements found:",{statusDot:!!g,statusText:!!u,tabsList:!!m,logsList:!!v,globalPauseBtn:!!f,settingsBtn:!!b,clearLogsBtn:!!E,exportLogsBtn:!!S,settingsPanel:!!y,closeSettingsBtn:!!p,saveSettingsBtn:!!h,customClickIntervalInput:!!T,customRefreshIntervalInput:!!I,currentClickTimeSpan:!!A,currentRefreshTimeSpan:!!w}),!(g&&u&&m&&v&&f&&b&&E&&S&&y&&p&&h&&T&&I&&A&&w))throw console.error("üöÄ POPUP INIT - Missing DOM elements!"),new Error("Required DOM elements not found");await R(),await C(),await async function(){try{console.log("üì• LOAD GLOBAL PAUSE - Getting state from Service Worker...");const e=await k({type:"GET_EXTENSION_STATE"});e.success&&e.data?(P=e.data.globalPaused,console.log("üì• LOAD GLOBAL PAUSE - From Service Worker:",P)):(console.log("üì• LOAD GLOBAL PAUSE - Service Worker failed, using storage fallback"),P=await async function(){return(await l()).globalPaused}(),console.log("üì• LOAD GLOBAL PAUSE - From storage:",P)),M(),console.log("‚úÖ Global pause state loaded:",P)}catch(e){console.error("‚ùå Failed to load global pause state:",e),P=!1,M()}}(),await D(),f.addEventListener("click",$),b.addEventListener("click",(()=>{y.style.display="block",H(),function(){W("click");const e=document.querySelector(`[data-minutes="${L.clickInterval}"]`);e?e.classList.add("active"):T.value=L.clickInterval.toString(),W("refresh");const t=document.querySelector(`[data-refresh="${L.refreshInterval}"]`);t?t.classList.add("active"):I.value=L.refreshInterval.toString()}()})),p.addEventListener("click",_),h.addEventListener("click",z),document.querySelectorAll(".time-btn[data-minutes]").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target;!function(e){W("click");const t=document.querySelector(`[data-minutes="${e}"]`);t&&t.classList.add("active"),T.value=""}(parseInt(t.dataset.minutes||"0",10))}))})),document.querySelectorAll(".time-btn[data-refresh]").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target;!function(e){W("refresh");const t=document.querySelector(`[data-refresh="${e}"]`);t&&t.classList.add("active"),I.value=""}(parseInt(t.dataset.refresh||"0",10))}))})),T.addEventListener("input",(()=>{W("click")})),I.addEventListener("input",(()=>{W("refresh")})),E.addEventListener("click",G),S.addEventListener("click",N),chrome.runtime.onMessage.addListener(x),console.log("Event listeners set up"),function(){const e=document.querySelector(".version-info");if(e){const t=chrome.runtime.getManifest();e.textContent=`v${t.version} - Final Release ‚úÖ`,console.log("üìã Version updated to:",t.version)}}(),U(),F(),V(),console.log("üöÄ POPUP INIT - Popup interface initialized successfully")}catch(e){console.error("üöÄ POPUP INIT - Failed to initialize popup:",e),U("error","Initialization failed")}}()})),setInterval((()=>{C().then((()=>{F(),U()})),V()}),5e3)})();